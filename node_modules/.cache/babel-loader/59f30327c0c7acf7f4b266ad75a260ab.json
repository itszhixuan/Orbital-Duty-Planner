{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fireInputEvent = fireInputEvent;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"../../utils\");\n\nfunction fireInputEvent(element, _ref) {\n  let {\n    newValue,\n    newSelectionStart,\n    eventOverrides\n  } = _ref;\n\n  // apply the changes before firing the input event, so that input handlers can access the altered dom and selection\n  if ((0, _utils.isContentEditable)(element)) {\n    applyNative(element, 'textContent', newValue);\n  } else\n    /* istanbul ignore else */\n    if ((0, _utils.isElementType)(element, ['input', 'textarea'])) {\n      applyNative(element, 'value', newValue);\n    } else {\n      // TODO: properly type guard\n      throw new Error('Invalid Element');\n    }\n\n  setSelectionRangeAfterInput(element, newSelectionStart);\n\n  _dom.fireEvent.input(element, { ...eventOverrides\n  });\n\n  setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart);\n}\n\nfunction setSelectionRangeAfterInput(element, newSelectionStart) {\n  (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\n}\n\nfunction setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart) {\n  const value = (0, _utils.getValue)(element); // don't apply this workaround on elements that don't necessarily report the visible value - e.g. number\n  // TODO: this could probably be only applied when there is keyboardState.carryValue\n\n  const isUnreliableValue = value === '' && (0, _utils.hasUnreliableEmptyValue)(element);\n\n  if (!isUnreliableValue && value === newValue) {\n    const {\n      selectionStart\n    } = (0, _utils.getSelectionRange)(element);\n\n    if (selectionStart === value.length) {\n      // The value was changed as expected, but the cursor was moved to the end\n      // TODO: this could probably be only applied when we work around a framework setter on the element in applyNative\n      (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\n    }\n  }\n}\n\nconst initial = Symbol('initial input value/textContent');\nconst onBlur = Symbol('onBlur');\n/**\r\n * React tracks the changes on element properties.\r\n * This workaround tries to alter the DOM element without React noticing,\r\n * so that it later picks up the change.\r\n *\r\n * @see https://github.com/facebook/react/blob/148f8e497c7d37a3c7ab99f01dec2692427272b1/packages/react-dom/src/client/inputValueTracking.js#L51-L104\r\n */\n\nfunction applyNative(element, propName, propValue) {\n  const descriptor = Object.getOwnPropertyDescriptor(element, propName);\n  const nativeDescriptor = Object.getOwnPropertyDescriptor(element.constructor.prototype, propName);\n\n  if (descriptor && nativeDescriptor) {\n    Object.defineProperty(element, propName, nativeDescriptor);\n  } // Keep track of the initial value to determine if a change event should be dispatched.\n  // CONSTRAINT: We can not determine what happened between focus event and our first API call.\n\n\n  if (element[initial] === undefined) {\n    element[initial] = String(element[propName]);\n  }\n\n  element[propName] = propValue; // Add an event listener for the blur event to the capture phase on the window.\n  // CONSTRAINT: Currently there is no cross-platform solution to unshift the event handler stack.\n  // Our change event might occur after other event handlers on the blur event have been processed.\n\n  if (!element[onBlur]) {\n    var _element$ownerDocumen;\n\n    (_element$ownerDocumen = element.ownerDocument.defaultView) == null ? void 0 : _element$ownerDocumen.addEventListener('blur', element[onBlur] = () => {\n      const initV = element[initial]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete element[onBlur]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete element[initial];\n\n      if (String(element[propName]) !== initV) {\n        _dom.fireEvent.change(element);\n      }\n    }, {\n      capture: true,\n      once: true\n    });\n  }\n\n  if (descriptor) {\n    Object.defineProperty(element, propName, descriptor);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","fireInputEvent","_dom","require","_utils","element","newValue","newSelectionStart","eventOverrides","isContentEditable","applyNative","isElementType","Error","setSelectionRangeAfterInput","fireEvent","input","setSelectionRangeAfterInputHandler","setSelectionRange","getValue","isUnreliableValue","hasUnreliableEmptyValue","selectionStart","getSelectionRange","length","initial","Symbol","onBlur","propName","propValue","descriptor","getOwnPropertyDescriptor","nativeDescriptor","constructor","prototype","undefined","String","_element$ownerDocumen","ownerDocument","defaultView","addEventListener","initV","change","capture","once"],"sources":["C:/Users/leezh/Documents/Coding/Orbital Test/Orbital-Duty-Planner/node_modules/@testing-library/user-event/dist/keyboard/shared/fireInputEvent.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.fireInputEvent = fireInputEvent;\r\n\r\nvar _dom = require(\"@testing-library/dom\");\r\n\r\nvar _utils = require(\"../../utils\");\r\n\r\nfunction fireInputEvent(element, {\r\n  newValue,\r\n  newSelectionStart,\r\n  eventOverrides\r\n}) {\r\n  // apply the changes before firing the input event, so that input handlers can access the altered dom and selection\r\n  if ((0, _utils.isContentEditable)(element)) {\r\n    applyNative(element, 'textContent', newValue);\r\n  } else\r\n    /* istanbul ignore else */\r\n    if ((0, _utils.isElementType)(element, ['input', 'textarea'])) {\r\n      applyNative(element, 'value', newValue);\r\n    } else {\r\n      // TODO: properly type guard\r\n      throw new Error('Invalid Element');\r\n    }\r\n\r\n  setSelectionRangeAfterInput(element, newSelectionStart);\r\n\r\n  _dom.fireEvent.input(element, { ...eventOverrides\r\n  });\r\n\r\n  setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart);\r\n}\r\n\r\nfunction setSelectionRangeAfterInput(element, newSelectionStart) {\r\n  (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\r\n}\r\n\r\nfunction setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart) {\r\n  const value = (0, _utils.getValue)(element); // don't apply this workaround on elements that don't necessarily report the visible value - e.g. number\r\n  // TODO: this could probably be only applied when there is keyboardState.carryValue\r\n\r\n  const isUnreliableValue = value === '' && (0, _utils.hasUnreliableEmptyValue)(element);\r\n\r\n  if (!isUnreliableValue && value === newValue) {\r\n    const {\r\n      selectionStart\r\n    } = (0, _utils.getSelectionRange)(element);\r\n\r\n    if (selectionStart === value.length) {\r\n      // The value was changed as expected, but the cursor was moved to the end\r\n      // TODO: this could probably be only applied when we work around a framework setter on the element in applyNative\r\n      (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\r\n    }\r\n  }\r\n}\r\n\r\nconst initial = Symbol('initial input value/textContent');\r\nconst onBlur = Symbol('onBlur');\r\n\r\n/**\r\n * React tracks the changes on element properties.\r\n * This workaround tries to alter the DOM element without React noticing,\r\n * so that it later picks up the change.\r\n *\r\n * @see https://github.com/facebook/react/blob/148f8e497c7d37a3c7ab99f01dec2692427272b1/packages/react-dom/src/client/inputValueTracking.js#L51-L104\r\n */\r\nfunction applyNative(element, propName, propValue) {\r\n  const descriptor = Object.getOwnPropertyDescriptor(element, propName);\r\n  const nativeDescriptor = Object.getOwnPropertyDescriptor(element.constructor.prototype, propName);\r\n\r\n  if (descriptor && nativeDescriptor) {\r\n    Object.defineProperty(element, propName, nativeDescriptor);\r\n  } // Keep track of the initial value to determine if a change event should be dispatched.\r\n  // CONSTRAINT: We can not determine what happened between focus event and our first API call.\r\n\r\n\r\n  if (element[initial] === undefined) {\r\n    element[initial] = String(element[propName]);\r\n  }\r\n\r\n  element[propName] = propValue; // Add an event listener for the blur event to the capture phase on the window.\r\n  // CONSTRAINT: Currently there is no cross-platform solution to unshift the event handler stack.\r\n  // Our change event might occur after other event handlers on the blur event have been processed.\r\n\r\n  if (!element[onBlur]) {\r\n    var _element$ownerDocumen;\r\n\r\n    (_element$ownerDocumen = element.ownerDocument.defaultView) == null ? void 0 : _element$ownerDocumen.addEventListener('blur', element[onBlur] = () => {\r\n      const initV = element[initial]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n\r\n      delete element[onBlur]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n\r\n      delete element[initial];\r\n\r\n      if (String(element[propName]) !== initV) {\r\n        _dom.fireEvent.change(element);\r\n      }\r\n    }, {\r\n      capture: true,\r\n      once: true\r\n    });\r\n  }\r\n\r\n  if (descriptor) {\r\n    Object.defineProperty(element, propName, descriptor);\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}
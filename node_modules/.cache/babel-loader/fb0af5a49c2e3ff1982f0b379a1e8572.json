{"ast":null,"code":"import { getValue, setValue, merge, isBlazor } from './util';\nimport { Base } from './base';\n/**\n * To detect the changes for inner properties.\n *\n * @private\n */\n\nvar ChildProperty =\n/** @class */\nfunction () {\n  function ChildProperty(parent, propName, defaultValue, isArray) {\n    this.isComplexArraySetter = false;\n    this.properties = {};\n    this.changedProperties = {};\n    this.childChangedProperties = {};\n    this.oldProperties = {}; // eslint-disable-next-line\n\n    this.finalUpdate = function () {};\n\n    this.callChildDataBind = getValue('callChildDataBind', Base);\n    this.parentObj = parent;\n    this.controlParent = this.parentObj.controlParent || this.parentObj;\n    this.propName = propName;\n    this.isParentArray = isArray;\n    this.setProperties(defaultValue, true);\n  }\n  /**\n   * Updates the property changes\n   *\n   * @param {boolean} val ?\n   * @param {string} propName ?\n   * @returns {void} ?\n   */\n\n\n  ChildProperty.prototype.updateChange = function (val, propName) {\n    if (val === true) {\n      this.parentObj.childChangedProperties[propName] = val;\n    } else {\n      delete this.parentObj.childChangedProperties[propName];\n    }\n\n    if (this.parentObj.updateChange) {\n      this.parentObj.updateChange(val, this.parentObj.propName);\n    }\n  };\n  /**\n   * Updates time out duration\n   *\n   * @returns {void} ?\n   */\n\n\n  ChildProperty.prototype.updateTimeOut = function () {\n    if (this.parentObj.updateTimeOut) {\n      this.parentObj.finalUpdate();\n      this.parentObj.updateTimeOut();\n    } else {\n      var changeTime_1 = setTimeout(this.parentObj.dataBind.bind(this.parentObj));\n\n      var clearUpdate = function () {\n        clearTimeout(changeTime_1);\n      };\n\n      this.finalUpdate = clearUpdate;\n    }\n  };\n  /**\n   * Clears changed properties\n   *\n   * @returns {void} ?\n   */\n\n\n  ChildProperty.prototype.clearChanges = function () {\n    this.finalUpdate();\n    this.updateChange(false, this.propName);\n    this.oldProperties = {};\n    this.changedProperties = {};\n  };\n  /**\n   * Set property changes\n   *\n   * @param {Object} prop ?\n   * @param {boolean} muteOnChange ?\n   * @returns {void} ?\n   */\n\n\n  ChildProperty.prototype.setProperties = function (prop, muteOnChange) {\n    if (muteOnChange === true) {\n      merge(this, prop);\n      this.updateChange(false, this.propName);\n      this.clearChanges();\n    } else {\n      merge(this, prop);\n    }\n  };\n  /**\n   * Binds data\n   *\n   * @returns {void} ?\n   */\n\n\n  ChildProperty.prototype.dataBind = function () {\n    this.callChildDataBind(this.childChangedProperties, this);\n\n    if (this.isParentArray) {\n      var curIndex = this.parentObj[this.propName].indexOf(this);\n\n      if (Object.keys(this.changedProperties).length) {\n        setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);\n        setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);\n      }\n    } else {\n      this.parentObj.changedProperties[this.propName] = this.changedProperties;\n      this.parentObj.oldProperties[this.propName] = this.oldProperties;\n    }\n\n    this.clearChanges();\n  };\n  /**\n   * Saves changes to newer values\n   *\n   * @param {string} key ?\n   * @param {Object} newValue ?\n   * @param {Object} oldValue ?\n   * @param {boolean} restrictServerDataBind ?\n   * @returns {void} ?\n   */\n\n\n  ChildProperty.prototype.saveChanges = function (key, newValue, oldValue, restrictServerDataBind) {\n    if (this.controlParent.isProtectedOnChange) {\n      return;\n    }\n\n    if (!restrictServerDataBind) {\n      this.serverDataBind(key, newValue, true);\n    }\n\n    this.oldProperties[key] = oldValue;\n    this.changedProperties[key] = newValue;\n    this.updateChange(true, this.propName);\n    this.finalUpdate();\n    this.updateTimeOut();\n  };\n\n  ChildProperty.prototype.serverDataBind = function (key, value, isSaveChanges, action) {\n    if (isBlazor() && !this.parentObj.isComplexArraySetter) {\n      var parent_1;\n      var newChanges = {};\n      var parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;\n      /* istanbul ignore else  */\n\n      if (parentKey.indexOf('.') !== -1) {\n        var complexKeys = parentKey.split('.');\n        parent_1 = newChanges;\n\n        for (var i = 0; i < complexKeys.length; i++) {\n          var isFinal = i === complexKeys.length - 1;\n          parent_1[complexKeys[i]] = isFinal ? value : {};\n          parent_1 = isFinal ? parent_1 : parent_1[complexKeys[i]];\n        }\n      } else {\n        newChanges[parentKey] = {};\n        parent_1 = newChanges[parentKey];\n        newChanges[parentKey][key] = value;\n      }\n      /* istanbul ignore next */\n\n\n      if (this.isParentArray) {\n        var actionProperty = 'ejsAction';\n        parent_1[actionProperty] = action ? action : 'none';\n      }\n\n      this.controlParent.serverDataBind(newChanges);\n    }\n  };\n\n  ChildProperty.prototype.getParentKey = function (isSaveChanges) {\n    // eslint-disable-next-line\n    var index = '';\n    var propName = this.propName;\n    /* istanbul ignore next */\n\n    if (this.isParentArray) {\n      index = this.parentObj[this.propName].indexOf(this);\n      var valueLength = this.parentObj[this.propName].length;\n      valueLength = isSaveChanges ? valueLength : valueLength > 0 ? valueLength - 1 : 0;\n      index = index !== -1 ? '-' + index : '-' + valueLength;\n      propName = propName + index;\n    }\n\n    if (this.controlParent !== this.parentObj) {\n      propName = this.parentObj.getParentKey() + '.' + this.propName + index;\n    }\n\n    return propName;\n  };\n\n  return ChildProperty;\n}();\n\nexport { ChildProperty };","map":{"version":3,"names":["getValue","setValue","merge","isBlazor","Base","ChildProperty","parent","propName","defaultValue","isArray","isComplexArraySetter","properties","changedProperties","childChangedProperties","oldProperties","finalUpdate","callChildDataBind","parentObj","controlParent","isParentArray","setProperties","prototype","updateChange","val","updateTimeOut","changeTime_1","setTimeout","dataBind","bind","clearUpdate","clearTimeout","clearChanges","prop","muteOnChange","curIndex","indexOf","Object","keys","length","saveChanges","key","newValue","oldValue","restrictServerDataBind","isProtectedOnChange","serverDataBind","value","isSaveChanges","action","parent_1","newChanges","parentKey","getParentKey","complexKeys","split","i","isFinal","actionProperty","index","valueLength"],"sources":["C:/Users/leezh/Documents/Coding/Orbital Test/Orbital-Duty-Planner/node_modules/@syncfusion/ej2-base/src/child-property.js"],"sourcesContent":["import { getValue, setValue, merge, isBlazor } from './util';\nimport { Base } from './base';\n/**\n * To detect the changes for inner properties.\n *\n * @private\n */\nvar ChildProperty = /** @class */ (function () {\n    function ChildProperty(parent, propName, defaultValue, isArray) {\n        this.isComplexArraySetter = false;\n        this.properties = {};\n        this.changedProperties = {};\n        this.childChangedProperties = {};\n        this.oldProperties = {};\n        // eslint-disable-next-line\n        this.finalUpdate = function () { };\n        this.callChildDataBind = getValue('callChildDataBind', Base);\n        this.parentObj = parent;\n        this.controlParent = this.parentObj.controlParent || this.parentObj;\n        this.propName = propName;\n        this.isParentArray = isArray;\n        this.setProperties(defaultValue, true);\n    }\n    /**\n     * Updates the property changes\n     *\n     * @param {boolean} val ?\n     * @param {string} propName ?\n     * @returns {void} ?\n     */\n    ChildProperty.prototype.updateChange = function (val, propName) {\n        if (val === true) {\n            this.parentObj.childChangedProperties[propName] = val;\n        }\n        else {\n            delete this.parentObj.childChangedProperties[propName];\n        }\n        if (this.parentObj.updateChange) {\n            this.parentObj.updateChange(val, this.parentObj.propName);\n        }\n    };\n    /**\n     * Updates time out duration\n     *\n     * @returns {void} ?\n     */\n    ChildProperty.prototype.updateTimeOut = function () {\n        if (this.parentObj.updateTimeOut) {\n            this.parentObj.finalUpdate();\n            this.parentObj.updateTimeOut();\n        }\n        else {\n            var changeTime_1 = setTimeout(this.parentObj.dataBind.bind(this.parentObj));\n            var clearUpdate = function () {\n                clearTimeout(changeTime_1);\n            };\n            this.finalUpdate = clearUpdate;\n        }\n    };\n    /**\n     * Clears changed properties\n     *\n     * @returns {void} ?\n     */\n    ChildProperty.prototype.clearChanges = function () {\n        this.finalUpdate();\n        this.updateChange(false, this.propName);\n        this.oldProperties = {};\n        this.changedProperties = {};\n    };\n    /**\n     * Set property changes\n     *\n     * @param {Object} prop ?\n     * @param {boolean} muteOnChange ?\n     * @returns {void} ?\n     */\n    ChildProperty.prototype.setProperties = function (prop, muteOnChange) {\n        if (muteOnChange === true) {\n            merge(this, prop);\n            this.updateChange(false, this.propName);\n            this.clearChanges();\n        }\n        else {\n            merge(this, prop);\n        }\n    };\n    /**\n     * Binds data\n     *\n     * @returns {void} ?\n     */\n    ChildProperty.prototype.dataBind = function () {\n        this.callChildDataBind(this.childChangedProperties, this);\n        if (this.isParentArray) {\n            var curIndex = this.parentObj[this.propName].indexOf(this);\n            if (Object.keys(this.changedProperties).length) {\n                setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);\n                setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);\n            }\n        }\n        else {\n            this.parentObj.changedProperties[this.propName] = this.changedProperties;\n            this.parentObj.oldProperties[this.propName] = this.oldProperties;\n        }\n        this.clearChanges();\n    };\n    /**\n     * Saves changes to newer values\n     *\n     * @param {string} key ?\n     * @param {Object} newValue ?\n     * @param {Object} oldValue ?\n     * @param {boolean} restrictServerDataBind ?\n     * @returns {void} ?\n     */\n    ChildProperty.prototype.saveChanges = function (key, newValue, oldValue, restrictServerDataBind) {\n        if (this.controlParent.isProtectedOnChange) {\n            return;\n        }\n        if (!restrictServerDataBind) {\n            this.serverDataBind(key, newValue, true);\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.updateChange(true, this.propName);\n        this.finalUpdate();\n        this.updateTimeOut();\n    };\n    ChildProperty.prototype.serverDataBind = function (key, value, isSaveChanges, action) {\n        if (isBlazor() && !this.parentObj.isComplexArraySetter) {\n            var parent_1;\n            var newChanges = {};\n            var parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;\n            /* istanbul ignore else  */\n            if (parentKey.indexOf('.') !== -1) {\n                var complexKeys = parentKey.split('.');\n                parent_1 = newChanges;\n                for (var i = 0; i < complexKeys.length; i++) {\n                    var isFinal = i === complexKeys.length - 1;\n                    parent_1[complexKeys[i]] = isFinal ? value : {};\n                    parent_1 = isFinal ? parent_1 : parent_1[complexKeys[i]];\n                }\n            }\n            else {\n                newChanges[parentKey] = {};\n                parent_1 = newChanges[parentKey];\n                newChanges[parentKey][key] = value;\n            }\n            /* istanbul ignore next */\n            if (this.isParentArray) {\n                var actionProperty = 'ejsAction';\n                parent_1[actionProperty] = action ? action : 'none';\n            }\n            this.controlParent.serverDataBind(newChanges);\n        }\n    };\n    ChildProperty.prototype.getParentKey = function (isSaveChanges) {\n        // eslint-disable-next-line\n        var index = '';\n        var propName = this.propName;\n        /* istanbul ignore next */\n        if (this.isParentArray) {\n            index = this.parentObj[this.propName].indexOf(this);\n            var valueLength = this.parentObj[this.propName].length;\n            valueLength = isSaveChanges ? valueLength : (valueLength > 0 ? valueLength - 1 : 0);\n            index = index !== -1 ? '-' + index : '-' + valueLength;\n            propName = propName + index;\n        }\n        if (this.controlParent !== this.parentObj) {\n            propName = this.parentObj.getParentKey() + '.' + this.propName + index;\n        }\n        return propName;\n    };\n    return ChildProperty;\n}());\nexport { ChildProperty };\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,KAA7B,EAAoCC,QAApC,QAAoD,QAApD;AACA,SAASC,IAAT,QAAqB,QAArB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa;AAAG;AAAe,YAAY;EAC3C,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,YAAzC,EAAuDC,OAAvD,EAAgE;IAC5D,KAAKC,oBAAL,GAA4B,KAA5B;IACA,KAAKC,UAAL,GAAkB,EAAlB;IACA,KAAKC,iBAAL,GAAyB,EAAzB;IACA,KAAKC,sBAAL,GAA8B,EAA9B;IACA,KAAKC,aAAL,GAAqB,EAArB,CAL4D,CAM5D;;IACA,KAAKC,WAAL,GAAmB,YAAY,CAAG,CAAlC;;IACA,KAAKC,iBAAL,GAAyBhB,QAAQ,CAAC,mBAAD,EAAsBI,IAAtB,CAAjC;IACA,KAAKa,SAAL,GAAiBX,MAAjB;IACA,KAAKY,aAAL,GAAqB,KAAKD,SAAL,CAAeC,aAAf,IAAgC,KAAKD,SAA1D;IACA,KAAKV,QAAL,GAAgBA,QAAhB;IACA,KAAKY,aAAL,GAAqBV,OAArB;IACA,KAAKW,aAAL,CAAmBZ,YAAnB,EAAiC,IAAjC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIH,aAAa,CAACgB,SAAd,CAAwBC,YAAxB,GAAuC,UAAUC,GAAV,EAAehB,QAAf,EAAyB;IAC5D,IAAIgB,GAAG,KAAK,IAAZ,EAAkB;MACd,KAAKN,SAAL,CAAeJ,sBAAf,CAAsCN,QAAtC,IAAkDgB,GAAlD;IACH,CAFD,MAGK;MACD,OAAO,KAAKN,SAAL,CAAeJ,sBAAf,CAAsCN,QAAtC,CAAP;IACH;;IACD,IAAI,KAAKU,SAAL,CAAeK,YAAnB,EAAiC;MAC7B,KAAKL,SAAL,CAAeK,YAAf,CAA4BC,GAA5B,EAAiC,KAAKN,SAAL,CAAeV,QAAhD;IACH;EACJ,CAVD;EAWA;AACJ;AACA;AACA;AACA;;;EACIF,aAAa,CAACgB,SAAd,CAAwBG,aAAxB,GAAwC,YAAY;IAChD,IAAI,KAAKP,SAAL,CAAeO,aAAnB,EAAkC;MAC9B,KAAKP,SAAL,CAAeF,WAAf;MACA,KAAKE,SAAL,CAAeO,aAAf;IACH,CAHD,MAIK;MACD,IAAIC,YAAY,GAAGC,UAAU,CAAC,KAAKT,SAAL,CAAeU,QAAf,CAAwBC,IAAxB,CAA6B,KAAKX,SAAlC,CAAD,CAA7B;;MACA,IAAIY,WAAW,GAAG,YAAY;QAC1BC,YAAY,CAACL,YAAD,CAAZ;MACH,CAFD;;MAGA,KAAKV,WAAL,GAAmBc,WAAnB;IACH;EACJ,CAZD;EAaA;AACJ;AACA;AACA;AACA;;;EACIxB,aAAa,CAACgB,SAAd,CAAwBU,YAAxB,GAAuC,YAAY;IAC/C,KAAKhB,WAAL;IACA,KAAKO,YAAL,CAAkB,KAAlB,EAAyB,KAAKf,QAA9B;IACA,KAAKO,aAAL,GAAqB,EAArB;IACA,KAAKF,iBAAL,GAAyB,EAAzB;EACH,CALD;EAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIP,aAAa,CAACgB,SAAd,CAAwBD,aAAxB,GAAwC,UAAUY,IAAV,EAAgBC,YAAhB,EAA8B;IAClE,IAAIA,YAAY,KAAK,IAArB,EAA2B;MACvB/B,KAAK,CAAC,IAAD,EAAO8B,IAAP,CAAL;MACA,KAAKV,YAAL,CAAkB,KAAlB,EAAyB,KAAKf,QAA9B;MACA,KAAKwB,YAAL;IACH,CAJD,MAKK;MACD7B,KAAK,CAAC,IAAD,EAAO8B,IAAP,CAAL;IACH;EACJ,CATD;EAUA;AACJ;AACA;AACA;AACA;;;EACI3B,aAAa,CAACgB,SAAd,CAAwBM,QAAxB,GAAmC,YAAY;IAC3C,KAAKX,iBAAL,CAAuB,KAAKH,sBAA5B,EAAoD,IAApD;;IACA,IAAI,KAAKM,aAAT,EAAwB;MACpB,IAAIe,QAAQ,GAAG,KAAKjB,SAAL,CAAe,KAAKV,QAApB,EAA8B4B,OAA9B,CAAsC,IAAtC,CAAf;;MACA,IAAIC,MAAM,CAACC,IAAP,CAAY,KAAKzB,iBAAjB,EAAoC0B,MAAxC,EAAgD;QAC5CrC,QAAQ,CAAC,KAAKM,QAAL,GAAgB,GAAhB,GAAsB2B,QAAvB,EAAiC,KAAKtB,iBAAtC,EAAyD,KAAKK,SAAL,CAAeL,iBAAxE,CAAR;QACAX,QAAQ,CAAC,KAAKM,QAAL,GAAgB,GAAhB,GAAsB2B,QAAvB,EAAiC,KAAKpB,aAAtC,EAAqD,KAAKG,SAAL,CAAeH,aAApE,CAAR;MACH;IACJ,CAND,MAOK;MACD,KAAKG,SAAL,CAAeL,iBAAf,CAAiC,KAAKL,QAAtC,IAAkD,KAAKK,iBAAvD;MACA,KAAKK,SAAL,CAAeH,aAAf,CAA6B,KAAKP,QAAlC,IAA8C,KAAKO,aAAnD;IACH;;IACD,KAAKiB,YAAL;EACH,CAdD;EAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI1B,aAAa,CAACgB,SAAd,CAAwBkB,WAAxB,GAAsC,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,sBAAnC,EAA2D;IAC7F,IAAI,KAAKzB,aAAL,CAAmB0B,mBAAvB,EAA4C;MACxC;IACH;;IACD,IAAI,CAACD,sBAAL,EAA6B;MACzB,KAAKE,cAAL,CAAoBL,GAApB,EAAyBC,QAAzB,EAAmC,IAAnC;IACH;;IACD,KAAK3B,aAAL,CAAmB0B,GAAnB,IAA0BE,QAA1B;IACA,KAAK9B,iBAAL,CAAuB4B,GAAvB,IAA8BC,QAA9B;IACA,KAAKnB,YAAL,CAAkB,IAAlB,EAAwB,KAAKf,QAA7B;IACA,KAAKQ,WAAL;IACA,KAAKS,aAAL;EACH,CAZD;;EAaAnB,aAAa,CAACgB,SAAd,CAAwBwB,cAAxB,GAAyC,UAAUL,GAAV,EAAeM,KAAf,EAAsBC,aAAtB,EAAqCC,MAArC,EAA6C;IAClF,IAAI7C,QAAQ,MAAM,CAAC,KAAKc,SAAL,CAAeP,oBAAlC,EAAwD;MACpD,IAAIuC,QAAJ;MACA,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAIC,SAAS,GAAGJ,aAAa,GAAG,KAAKK,YAAL,CAAkB,IAAlB,IAA0B,GAA1B,GAAgCZ,GAAnC,GAAyCA,GAAtE;MACA;;MACA,IAAIW,SAAS,CAAChB,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAAhC,EAAmC;QAC/B,IAAIkB,WAAW,GAAGF,SAAS,CAACG,KAAV,CAAgB,GAAhB,CAAlB;QACAL,QAAQ,GAAGC,UAAX;;QACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACf,MAAhC,EAAwCiB,CAAC,EAAzC,EAA6C;UACzC,IAAIC,OAAO,GAAGD,CAAC,KAAKF,WAAW,CAACf,MAAZ,GAAqB,CAAzC;UACAW,QAAQ,CAACI,WAAW,CAACE,CAAD,CAAZ,CAAR,GAA2BC,OAAO,GAAGV,KAAH,GAAW,EAA7C;UACAG,QAAQ,GAAGO,OAAO,GAAGP,QAAH,GAAcA,QAAQ,CAACI,WAAW,CAACE,CAAD,CAAZ,CAAxC;QACH;MACJ,CARD,MASK;QACDL,UAAU,CAACC,SAAD,CAAV,GAAwB,EAAxB;QACAF,QAAQ,GAAGC,UAAU,CAACC,SAAD,CAArB;QACAD,UAAU,CAACC,SAAD,CAAV,CAAsBX,GAAtB,IAA6BM,KAA7B;MACH;MACD;;;MACA,IAAI,KAAK3B,aAAT,EAAwB;QACpB,IAAIsC,cAAc,GAAG,WAArB;QACAR,QAAQ,CAACQ,cAAD,CAAR,GAA2BT,MAAM,GAAGA,MAAH,GAAY,MAA7C;MACH;;MACD,KAAK9B,aAAL,CAAmB2B,cAAnB,CAAkCK,UAAlC;IACH;EACJ,CA3BD;;EA4BA7C,aAAa,CAACgB,SAAd,CAAwB+B,YAAxB,GAAuC,UAAUL,aAAV,EAAyB;IAC5D;IACA,IAAIW,KAAK,GAAG,EAAZ;IACA,IAAInD,QAAQ,GAAG,KAAKA,QAApB;IACA;;IACA,IAAI,KAAKY,aAAT,EAAwB;MACpBuC,KAAK,GAAG,KAAKzC,SAAL,CAAe,KAAKV,QAApB,EAA8B4B,OAA9B,CAAsC,IAAtC,CAAR;MACA,IAAIwB,WAAW,GAAG,KAAK1C,SAAL,CAAe,KAAKV,QAApB,EAA8B+B,MAAhD;MACAqB,WAAW,GAAGZ,aAAa,GAAGY,WAAH,GAAkBA,WAAW,GAAG,CAAd,GAAkBA,WAAW,GAAG,CAAhC,GAAoC,CAAjF;MACAD,KAAK,GAAGA,KAAK,KAAK,CAAC,CAAX,GAAe,MAAMA,KAArB,GAA6B,MAAMC,WAA3C;MACApD,QAAQ,GAAGA,QAAQ,GAAGmD,KAAtB;IACH;;IACD,IAAI,KAAKxC,aAAL,KAAuB,KAAKD,SAAhC,EAA2C;MACvCV,QAAQ,GAAG,KAAKU,SAAL,CAAemC,YAAf,KAAgC,GAAhC,GAAsC,KAAK7C,QAA3C,GAAsDmD,KAAjE;IACH;;IACD,OAAOnD,QAAP;EACH,CAhBD;;EAiBA,OAAOF,aAAP;AACH,CAxKkC,EAAnC;;AAyKA,SAASA,aAAT"},"metadata":{},"sourceType":"module"}
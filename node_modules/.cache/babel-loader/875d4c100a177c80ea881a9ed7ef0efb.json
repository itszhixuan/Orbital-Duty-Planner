{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.paste = paste;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"./utils\");\n\nfunction isSupportedElement(element) {\n  return (0, _utils.isElementType)(element, 'input') && Boolean(_utils.editableInputTypes[element.type]) || (0, _utils.isElementType)(element, 'textarea');\n}\n\nfunction paste(element, text, init) {\n  let {\n    initialSelectionStart,\n    initialSelectionEnd\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  // TODO: implement for contenteditable\n  if (!isSupportedElement(element)) {\n    throw new TypeError(`The given ${element.tagName} element is currently unsupported.\n      A PR extending this implementation would be very much welcome at https://github.com/testing-library/user-event`);\n  }\n\n  if ((0, _utils.isDisabled)(element)) {\n    return;\n  }\n\n  (0, _utils.eventWrapper)(() => element.focus()); // by default, a new element has it's selection start and end at 0\n  // but most of the time when people call \"paste\", they expect it to paste\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitely start typing with the cursor at 0. Not super common.\n\n  if (element.selectionStart === 0 && element.selectionEnd === 0) {\n    (0, _utils.setSelectionRange)(element, initialSelectionStart != null ? initialSelectionStart : element.value.length, initialSelectionEnd != null ? initialSelectionEnd : element.value.length);\n  }\n\n  _dom.fireEvent.paste(element, init);\n\n  if (element.readOnly) {\n    return;\n  }\n\n  text = text.substr(0, (0, _utils.getSpaceUntilMaxLength)(element));\n  const {\n    newValue,\n    newSelectionStart\n  } = (0, _utils.calculateNewValue)(text, element);\n\n  _dom.fireEvent.input(element, {\n    inputType: 'insertFromPaste',\n    target: {\n      value: newValue\n    }\n  });\n\n  (0, _utils.setSelectionRange)(element, // TODO: investigate why the selection caused by invalid parameters was expected\n  {\n    newSelectionStart,\n    selectionEnd: newSelectionStart\n  }, {});\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","paste","_dom","require","_utils","isSupportedElement","element","isElementType","Boolean","editableInputTypes","type","text","init","initialSelectionStart","initialSelectionEnd","TypeError","tagName","isDisabled","eventWrapper","focus","selectionStart","selectionEnd","setSelectionRange","length","fireEvent","readOnly","substr","getSpaceUntilMaxLength","newValue","newSelectionStart","calculateNewValue","input","inputType","target"],"sources":["C:/Users/leezh/Documents/Coding/Orbital Test/Orbital-Duty-Planner/node_modules/@testing-library/user-event/dist/paste.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.paste = paste;\r\n\r\nvar _dom = require(\"@testing-library/dom\");\r\n\r\nvar _utils = require(\"./utils\");\r\n\r\nfunction isSupportedElement(element) {\r\n  return (0, _utils.isElementType)(element, 'input') && Boolean(_utils.editableInputTypes[element.type]) || (0, _utils.isElementType)(element, 'textarea');\r\n}\r\n\r\nfunction paste(element, text, init, {\r\n  initialSelectionStart,\r\n  initialSelectionEnd\r\n} = {}) {\r\n  // TODO: implement for contenteditable\r\n  if (!isSupportedElement(element)) {\r\n    throw new TypeError(`The given ${element.tagName} element is currently unsupported.\r\n      A PR extending this implementation would be very much welcome at https://github.com/testing-library/user-event`);\r\n  }\r\n\r\n  if ((0, _utils.isDisabled)(element)) {\r\n    return;\r\n  }\r\n\r\n  (0, _utils.eventWrapper)(() => element.focus()); // by default, a new element has it's selection start and end at 0\r\n  // but most of the time when people call \"paste\", they expect it to paste\r\n  // at the end of the current input value. So, if the selection start\r\n  // and end are both the default of 0, then we'll go ahead and change\r\n  // them to the length of the current value.\r\n  // the only time it would make sense to pass the initialSelectionStart or\r\n  // initialSelectionEnd is if you have an input with a value and want to\r\n  // explicitely start typing with the cursor at 0. Not super common.\r\n\r\n  if (element.selectionStart === 0 && element.selectionEnd === 0) {\r\n    (0, _utils.setSelectionRange)(element, initialSelectionStart != null ? initialSelectionStart : element.value.length, initialSelectionEnd != null ? initialSelectionEnd : element.value.length);\r\n  }\r\n\r\n  _dom.fireEvent.paste(element, init);\r\n\r\n  if (element.readOnly) {\r\n    return;\r\n  }\r\n\r\n  text = text.substr(0, (0, _utils.getSpaceUntilMaxLength)(element));\r\n  const {\r\n    newValue,\r\n    newSelectionStart\r\n  } = (0, _utils.calculateNewValue)(text, element);\r\n\r\n  _dom.fireEvent.input(element, {\r\n    inputType: 'insertFromPaste',\r\n    target: {\r\n      value: newValue\r\n    }\r\n  });\r\n\r\n  (0, _utils.setSelectionRange)(element, // TODO: investigate why the selection caused by invalid parameters was expected\r\n  {\r\n    newSelectionStart,\r\n    selectionEnd: newSelectionStart\r\n  }, {});\r\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,KAAR,GAAgBA,KAAhB;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,sBAAD,CAAlB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASE,kBAAT,CAA4BC,OAA5B,EAAqC;EACnC,OAAO,CAAC,GAAGF,MAAM,CAACG,aAAX,EAA0BD,OAA1B,EAAmC,OAAnC,KAA+CE,OAAO,CAACJ,MAAM,CAACK,kBAAP,CAA0BH,OAAO,CAACI,IAAlC,CAAD,CAAtD,IAAmG,CAAC,GAAGN,MAAM,CAACG,aAAX,EAA0BD,OAA1B,EAAmC,UAAnC,CAA1G;AACD;;AAED,SAASL,KAAT,CAAeK,OAAf,EAAwBK,IAAxB,EAA8BC,IAA9B,EAGQ;EAAA,IAH4B;IAClCC,qBADkC;IAElCC;EAFkC,CAG5B,uEAAJ,EAAI;;EACN;EACA,IAAI,CAACT,kBAAkB,CAACC,OAAD,CAAvB,EAAkC;IAChC,MAAM,IAAIS,SAAJ,CAAe,aAAYT,OAAO,CAACU,OAAQ;AACrD,qHADU,CAAN;EAED;;EAED,IAAI,CAAC,GAAGZ,MAAM,CAACa,UAAX,EAAuBX,OAAvB,CAAJ,EAAqC;IACnC;EACD;;EAED,CAAC,GAAGF,MAAM,CAACc,YAAX,EAAyB,MAAMZ,OAAO,CAACa,KAAR,EAA/B,EAXM,CAW2C;EACjD;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIb,OAAO,CAACc,cAAR,KAA2B,CAA3B,IAAgCd,OAAO,CAACe,YAAR,KAAyB,CAA7D,EAAgE;IAC9D,CAAC,GAAGjB,MAAM,CAACkB,iBAAX,EAA8BhB,OAA9B,EAAuCO,qBAAqB,IAAI,IAAzB,GAAgCA,qBAAhC,GAAwDP,OAAO,CAACN,KAAR,CAAcuB,MAA7G,EAAqHT,mBAAmB,IAAI,IAAvB,GAA8BA,mBAA9B,GAAoDR,OAAO,CAACN,KAAR,CAAcuB,MAAvL;EACD;;EAEDrB,IAAI,CAACsB,SAAL,CAAevB,KAAf,CAAqBK,OAArB,EAA8BM,IAA9B;;EAEA,IAAIN,OAAO,CAACmB,QAAZ,EAAsB;IACpB;EACD;;EAEDd,IAAI,GAAGA,IAAI,CAACe,MAAL,CAAY,CAAZ,EAAe,CAAC,GAAGtB,MAAM,CAACuB,sBAAX,EAAmCrB,OAAnC,CAAf,CAAP;EACA,MAAM;IACJsB,QADI;IAEJC;EAFI,IAGF,CAAC,GAAGzB,MAAM,CAAC0B,iBAAX,EAA8BnB,IAA9B,EAAoCL,OAApC,CAHJ;;EAKAJ,IAAI,CAACsB,SAAL,CAAeO,KAAf,CAAqBzB,OAArB,EAA8B;IAC5B0B,SAAS,EAAE,iBADiB;IAE5BC,MAAM,EAAE;MACNjC,KAAK,EAAE4B;IADD;EAFoB,CAA9B;;EAOA,CAAC,GAAGxB,MAAM,CAACkB,iBAAX,EAA8BhB,OAA9B,EAAuC;EACvC;IACEuB,iBADF;IAEER,YAAY,EAAEQ;EAFhB,CADA,EAIG,EAJH;AAKD"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n(function () {\n  'use strict';\n  /**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n\n  var MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element; // Initialize instance.\n\n    this.init();\n  };\n\n  window['MaterialProgress'] = MaterialProgress;\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n\n  MaterialProgress.prototype.Constant_ = {};\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n\n  MaterialProgress.prototype.CssClasses_ = {\n    INDETERMINATE_CLASS: 'mdl-progress__indeterminate'\n  };\n  /**\n   * Set the current progress of the progressbar.\n   *\n   * @param {number} p Percentage of the progress (0-100)\n   * @public\n   */\n\n  MaterialProgress.prototype.setProgress = function (p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n      return;\n    }\n\n    this.progressbar_.style.width = p + '%';\n  };\n\n  MaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;\n  /**\n   * Set the current progress of the buffer.\n   *\n   * @param {number} p Percentage of the buffer (0-100)\n   * @public\n   */\n\n  MaterialProgress.prototype.setBuffer = function (p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = 100 - p + '%';\n  };\n\n  MaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;\n  /**\n   * Initialize element.\n   */\n\n  MaterialProgress.prototype.init = function () {\n    if (this.element_) {\n      var el = document.createElement('div');\n      el.className = 'progressbar bar bar1';\n      this.element_.appendChild(el);\n      this.progressbar_ = el;\n      el = document.createElement('div');\n      el.className = 'bufferbar bar bar2';\n      this.element_.appendChild(el);\n      this.bufferbar_ = el;\n      el = document.createElement('div');\n      el.className = 'auxbar bar bar3';\n      this.element_.appendChild(el);\n      this.auxbar_ = el;\n      this.progressbar_.style.width = '0%';\n      this.bufferbar_.style.width = '100%';\n      this.auxbar_.style.width = '0%';\n      this.element_.classList.add('is-upgraded');\n    }\n  }; // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n\n\n  componentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n  });\n})();","map":{"version":3,"names":["MaterialProgress","element","element_","init","window","prototype","Constant_","CssClasses_","INDETERMINATE_CLASS","setProgress","p","classList","contains","progressbar_","style","width","setBuffer","bufferbar_","auxbar_","el","document","createElement","className","appendChild","add","componentHandler","register","constructor","classAsString","cssClass","widget"],"sources":["C:/Users/jweey/node_modules/material-design-lite/src/progress/progress.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialProgress'] = MaterialProgress;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialProgress.prototype.Constant_ = {\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialProgress.prototype.CssClasses_ = {\n    INDETERMINATE_CLASS: 'mdl-progress__indeterminate'\n  };\n\n  /**\n   * Set the current progress of the progressbar.\n   *\n   * @param {number} p Percentage of the progress (0-100)\n   * @public\n   */\n  MaterialProgress.prototype.setProgress = function(p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n      return;\n    }\n\n    this.progressbar_.style.width = p + '%';\n  };\n  MaterialProgress.prototype['setProgress'] =\n      MaterialProgress.prototype.setProgress;\n\n  /**\n   * Set the current progress of the buffer.\n   *\n   * @param {number} p Percentage of the buffer (0-100)\n   * @public\n   */\n  MaterialProgress.prototype.setBuffer = function(p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = (100 - p) + '%';\n  };\n  MaterialProgress.prototype['setBuffer'] =\n      MaterialProgress.prototype.setBuffer;\n\n  /**\n   * Initialize element.\n   */\n  MaterialProgress.prototype.init = function() {\n    if (this.element_) {\n      var el = document.createElement('div');\n      el.className = 'progressbar bar bar1';\n      this.element_.appendChild(el);\n      this.progressbar_ = el;\n\n      el = document.createElement('div');\n      el.className = 'bufferbar bar bar2';\n      this.element_.appendChild(el);\n      this.bufferbar_ = el;\n\n      el = document.createElement('div');\n      el.className = 'auxbar bar bar3';\n      this.element_.appendChild(el);\n      this.auxbar_ = el;\n\n      this.progressbar_.style.width = '0%';\n      this.bufferbar_.style.width = '100%';\n      this.auxbar_.style.width = '0%';\n\n      this.element_.classList.add('is-upgraded');\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n  });\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}